{"name":"Singleton Prototype Navios","tagline":"","body":"# Fabrica de Navios + Singleton + Prototype\r\nBlog sobre implementação dos padrões de projeto Factory Method e Abstract Factory. Adicionando também os padrões Singleton e Prototype\r\n\r\n### Factory Method\r\n\r\nO padrão Factory Method possui a seguinte intenção:\r\n\r\n“Definir uma interface para criar um objeto, mas deixar as subclasses decidirem que classe instanciar. O Factory Method\r\npermite adiar a instanciação para subclasses.” \r\n\r\nNo projeto dos navios, foi criado uma interface de criação de objetos e cada subclasse fica responsável por criar seus objetos. \r\nCom isso, aumentamos a facilidade em adicionar novos navios no projeto.\r\n\r\n### Abstract Factory\r\n\r\nNa Fábrica abstrata a ideia é a mesma, porém criamos uma interface para criação de famílias de objetos relacionados ou dependentes \r\nsem especificar suas classes concretas\r\n\r\n### Prototype\r\n\r\nO padrão protótipo visa especificar tipos de objetos a serem criados usando uma instância criada e realizando clones desta. No projeto dos navios, a classe Navio recebeu um método chamado clone que realiza essa cópia da primeira instância criada. Com isso podemos instanciar novos navios em tempode excução.\r\n\r\n### Singleton\r\n\r\nO padrão singleton garante que apenas uma objeto seja criado e prover um único ponto de acesso para esse objeto. No projeto utilizamos o singleton para que apenas uma unica fábrica de cada tipo fosse instanciada, reduziando o consumo de memoria já que cada fábrica terá apenas uma instância criada em tempo de excuação.\r\n\r\n\r\n## Diagrama de Classe\r\n\r\n![Diagrama de classe](https://github.com/jordankl93/SingletonPrototypeNavios/blob/master/SingletonPrototypeDiagramClass.jpg?raw=true)\r\n\r\n## Diagrama de caso de uso\r\n\r\n![Diagrama de caso de uso](https://github.com/jordankl93/SingletonPrototypeNavios/blob/master/SingletonPrototypeUseCase.jpg?raw=true)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}